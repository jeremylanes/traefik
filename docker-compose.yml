services:
  traefik:
    image: traefik:v3.5 # use the latest version
    container_name: traefik
    restart: unless-stopped # always
    command:
      # HTTP and HTTPS Entrypoints
      - --entrypoints.web.address=:80
      - --entrypoints.websecure.address=:443
      # Docker Provider Configuration
      - --providers.docker=true
      # - --providers.docker.exposedbydefault=false # Traefik only considers containers with specific labels
      # Managing SSL Certificates with Let's Encrypt
      - --certificatesresolvers.myresolver.acme.httpchallenge=true
      - --certificatesresolvers.myresolver.acme.httpchallenge.entrypoint=web
      - --certificatesresolvers.myresolver.acme.email=${LETSENCRYPT_EMAIL}
      - --certificatesresolvers.myresolver.acme.storage=/letsencrypt/acme.json # Certificate storage
      # Activation of the Traefik dashboard (optional, useful for debugging)
      - --api.dashboard=true
      - --api.insecure=false
      # Logging
      - -log.level=DEBUG
      - -accesslog=true
    ports:
      - "80:80"
      - "443:443"
      # Port 8080 is not required if you access the dashboard via a subdomain
      # as recommended for security and HTTPS integration.
      # If you absolutely must expose it on a direct port (less recommended in production),
      # you should at least protect it with firewall rules.
      # - "8080:8080"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro # Allows Traefik to communicate with Docker
      - ./acme.json:/letsencrypt/acme.json # Persistent Volume for Let's Encrypt Certificates
    networks:
      - traefik_proxy # Connect Traefik to the shared network
    labels:
      - "traefik.enable=true" # Activate Traefik for this service (the dashboard itself)
      # Router for dashboard
      - "traefik.http.routers.traefik-dashboard.rule=Host(`${TRAEFIK_DASHBOARD_HOST}`)"
      - "traefik.http.routers.traefik-dashboard.entrypoints=websecure" # Access via HTTPS
      - "traefik.http.routers.traefik-dashboard.service=api@internal" # Traefik Internal Service
      - "traefik.http.routers.traefik-dashboard.middlewares=dashboard-auth" # Applies authentication middleware
      - "traefik.http.routers.traefik-dashboard.tls.certresolver=myresolver" # Use Let's Encrypt
      ##
      # Router for dashboard (HTTP - Redirection to HTTPS)
      - "traefik.http.routers.traefik-dashboard-http.rule=Host(`${TRAEFIK_DASHBOARD_HOST}`)"
      - "traefik.http.routers.traefik-dashboard-http.entrypoints=web" # Listen on HTTP entrypoint
      - "traefik.http.routers.traefik-dashboard-http.middlewares=redirect-to-https" # Apply redirection middleware

      # Middleware to redirect HTTP to HTTPS
      - "traefik.http.middlewares.redirect-to-https.redirectscheme.scheme=https"
      - "traefik.http.middlewares.redirect-to-https.redirectscheme.permanent=true"
      ##

      # Basic authentication middleware (Basic Auth)
      - "traefik.http.middlewares.dashboard-auth.basicauth.users=${DASHBOARD_USERNAME}:${DASHBOARD_PASSWORD_HASH}"
      # Remember to escape '$' with '$$' in Docker Compose labels
networks:
  traefik_proxy:
    name: traefik_proxy