services:
  traefik:
    image: traefik:v3.5 # use the latest version
    container_name: traefik
    restart: unless-stopped # always
    security_opt:
      - no-new-privileges:true

    ports:
      - "80:80"
      - "443:443"
      # Port 8080 is not required if you access the dashboard via a subdomain
      # as recommended for security and HTTPS integration.
      # If you absolutely must expose it on a direct port (less recommended in production),
      # you should at least protect it with firewall rules.
      # - "8080:8080"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro # Allows Traefik to communicate with Docker
      - ./acme.json:/letsencrypt/acme.json # Persistent Volume for Let's Encrypt Certificates
    networks:
      - traefik_proxy # Connect Traefik to the shared network
    command:
      # EntryPoints
      - "--entrypoints.web.address=:80"
      - "--entrypoints.web.http.redirections.entrypoint.to=websecure"
      - "--entrypoints.web.http.redirections.entrypoint.scheme=https"
      - "--entrypoints.web.http.redirections.entrypoint.permanent=true"
      - "--entrypoints.websecure.address=:443"
      - "--entrypoints.websecure.http.tls=true"

      # Managing SSL Certificates with Let's Encrypt
      - "--certificatesresolvers.myresolver.acme.httpchallenge=true"
      - "--certificatesresolvers.myresolver.acme.httpchallenge.entrypoint=web"
      - "--certificatesresolvers.myresolver.acme.email=${LETSENCRYPT_EMAIL}"
      - "--certificatesresolvers.myresolver.acme.storage=/letsencrypt/acme.json" # Certificate storage

      # Attach the static configuration tls.yaml file that contains the tls configuration settings
      # - "--providers.file.filename=/dynamic/tls.yaml"

      # Providers
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--providers.docker.network=traefik_proxy"

      # API & Dashboard
      - "--api.dashboard=true"
      - "--api.insecure=false"

      # Observability
      # - "--log.level=DEBUG"
      - "--log.level=INFO"
      - "--accesslog=true"
      # - "--metrics.prometheus=true"
    labels:

      # Router for dashboard

      - "traefik.http.routers.dashboard.middlewares=dashboard-auth" # Applies authentication middleware
      - "traefik.http.routers.dashboard.tls.certresolver=myresolver" # Use Let's Encrypt
      ##
      # Router for dashboard (HTTP - Redirection to HTTPS)
      - "traefik.http.routers.dashboard-http.rule=Host(`${TRAEFIK_DASHBOARD_HOST}`)"
      # - "traefik.http.routers.dashboard-http.entrypoints=web" # Listen on HTTP entrypoint
      # - "traefik.http.routers.dashboard-http.middlewares=redirect-to-https" # Apply redirection middleware

      # Middleware to redirect HTTP to HTTPS
      # - "traefik.http.middlewares.redirect-to-https.redirectscheme.scheme=https"
      # - "traefik.http.middlewares.redirect-to-https.redirectscheme.permanent=true"
      ##

      # Basic authentication middleware (Basic Auth)

      # Remember to escape '$' with '$$' in Docker Compose labels

      # -------------------
      # Enable self‑routing
      - "traefik.enable=true" # Activate Traefik for this service (the dashboard itself)
      # Dashboard router
      - "traefik.http.routers.dashboard.rule=Host(`${TRAEFIK_DASHBOARD_HOST}`)"
      - "traefik.http.routers.dashboard.entrypoints=websecure"
      - "traefik.http.routers.dashboard.service=api@internal"
      - "traefik.http.routers.dashboard.tls=true"

      # Basic‑auth middleware
      - "traefik.http.middlewares.dashboard-auth.basicauth.users=${DASHBOARD_USERNAME}:${DASHBOARD_PASSWORD_HASH}"
      - "traefik.http.routers.dashboard.middlewares=dashboard-auth@docker"
networks:
  traefik_proxy:
    name: traefik_proxy